#!/bin/bash

readonly _DIR="$( cd -P "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd )"
readonly CWD="$( pwd )"

# Accept inputs
class="$1"; shift
n_outputs="$1"; shift

# Other configurations we may want to touch
src="${class}.java"
readonly n_invocations=100000
readonly modes=( level4 level1 )
readonly seed=42

# Constants
readonly JATTACK_JAR="${_DIR}/jattack-all.jar"
readonly DOT_DIR="${CWD}/.jattack"
mkdir -p "${DOT_DIR}"
readonly template_dir="${DOT_DIR}/${class}"
readonly build_dir="${template_dir}/build"
readonly gen_dir="${template_dir}/gen"
readonly output_dir="${template_dir}/output"

mkdir -p "${build_dir}"
mkdir -p "${gen_dir}"
mkdir -p "${output_dir}"

readonly STOP_AT_LEVEL="-XX:TieredStopAtLevel=" # followed by level number
readonly EXTRA_JAVA_FLAGS=""
readonly n_exec_itrs=""

function run_end_to_end() {
        ### Run end-to-end.

        build_jattack_jar
        compile_template
        generate
        execute_and_test
}

function build_jattack_jar() {
        ### Build JAttack jar.
        if [[ ! -f ${JATTACK_JAR} ]]; then
                # echo "Build JAttack jar..."
                local SRC_DIR="${_DIR}"/api
                pushd "${SRC_DIR}" >/dev/null
                local VERSION="$( grep '^version ' "${SRC_DIR}"/build.gradle | cut -d' ' -f2 | tr -d "'" )"
                ./gradlew -q clean shadowJar
                popd >/dev/null
                cp "${SRC_DIR}"/build/libs/jattack-$VERSION-all.jar "${_DIR}"/jattack-all.jar
        fi
}

function compile_template() {
        ### Compile the given template.

        if [[ ! -f $src ]]; then
                print_bail_out "File not found: $src"
                exit 1
        fi
        javac -cp "${JATTACK_JAR}" "${src}" -d "${build_dir}"
        if [[ $? -ne 0 ]]; then
                print_bail_out "Compiling template failed"
                exit 1
        fi
}

function generate() {
        ### Generate programs from the given template using JAttack.

        rm -fr "${gen_dir}" && mkdir -p "${gen_dir}"
        java -javaagent:"${JATTACK_JAR}" -cp "${build_dir}" jattack.driver.Driver \
             --clzName=${class} \
             --srcPath="${src}" \
             --seed=${seed} \
             --nOutputs=${n_outputs} \
             --outputDir="${gen_dir}" \
             --nInvocations=${n_invocations}
        if [[ $? -ne 0 ]]; then
                print_bail_out "Generating from template failed"
                exit 1
        fi
}

function execute_and_test() {
        ### Execute every generated program on different JIT compilers
        ### and perform differential testing over results.

        local num_gen=$( find "${gen_dir}" -name "*.java" | wc -l )
        echo "1..${num_gen}"

        local CP="${build_dir}:${JATTACK_JAR}"
        local test_number=0
        for file in $( find "${gen_dir}" -name "*.java" | sort -V ); do
                ((test_number++))
                local gen_clz="$( basename "${file}" | cut -d '.' -f 1 )"
                local output_dir_per_gen="${output_dir}/${gen_clz}"
                rm -fr "${output_dir_per_gen}" && mkdir -p "${output_dir_per_gen}"

                # Compile
                javac -cp "${JATTACK_JAR}" "${file}" -d "${build_dir}"
                if [[ $? -ne 0 ]]; then
                        print_not_ok ${test_number} ${gen_clz} 'compiling failed'
                        continue
                fi

                # Run at all modes
                declare -a crashed_modes=()
                for mode in "${modes[@]}"; do
                        output_file="${output_dir_per_gen}/${gen_clz}-${mode}.txt"
                        case "${mode}" in
                        'level'[01234])
                                level="${mode: -1}"
                                (
                                        java -cp "${CP}" \
                                             ${EXTRA_JAVA_FLAGS} \
                                             ${STOP_AT_LEVEL}${level} \
                                             ${gen_clz} ${n_exec_itrs} \
                                             >"${output_file}" 2>&1 \
                                                || exit 1
                                ) >/dev/null 2>&1
                                if [[ $? -ne 0 ]]; then
                                        crashed_modes+=($mode)
                                fi
                                ;;
                        *)
                                print_bail_out "Unsupported compilation mode: ${mode}"
                                exit 1
                                ;;
                        esac
                done

                if [[ ${#crashed_modes[@]} -gt 0 ]]; then
                        ## Crash
                        print_not_ok ${test_number} ${gen_clz} "crash at ${crashed_modes[*]}"
                        continue
                fi

                # Compare every two modes
                for (( i=0 ; i < ${#modes[@]} ; i+=1 )); do
                        for (( j=$(( ${i}+1 )) ; j < ${#modes[@]} ; j+=1 )); do
                                local modeA=${modes[i]}
                                local modeB=${modes[j]}

                                local diff_file="${output_dir_per_gen}/${gen_clz}-${modeA}-${modeB}-diffs.txt"
                                diff "${output_dir_per_gen}/${gen_clz}-${modeA}.txt" \
                                     "${output_dir_per_gen}/${gen_clz}-${modeB}.txt" \
                                     >"${diff_file}"
                                if [[ ! -s ${diff_file} ]]; then
                                        # remove empty diff file
                                        rm -f "${diff_file}"
                                else
                                        # Diff
                                        print_not_ok ${test_number} ${gen_clz} "diff between ${modeA} ${modeB}"
                                fi
                        done
                done

                print_ok ${test_number} ${gen_clz}
        done

}

### Utilities.
### ----------

function print_bail_out() {
        ### Print "bail out" as TAP format.
        local msg="$1"

        echo "Bail out! $msg"
}

function print_not_ok() {
        ### Print "not ok" test point as TAP format.
        local test_num="$1"; shift
        local desc="$1"; shift
        local msg="$1"; shift

        echo "not ok ${test_num} - ${desc}"
        echo "  ---"
        echo "  message: '$msg'"
        echo "  ..."
}

function print_ok() {
        ### Print "ok" test point as TAP format
        local test_num="$1"; shift
        local desc="$1"; shift

        echo "ok ${test_num} - ${desc}"
}

### Main.
### -----

function main() {
        run_end_to_end
}

main "$@"
